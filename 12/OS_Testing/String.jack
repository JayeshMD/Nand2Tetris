// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength>0){
            let str = Array.new(maxLength);
        }
        let len = 0; 
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[len] = c;
        let len = len +1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[len] = 0;
        if(len>0){
            let len = len -1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, n;
        var boolean neg_flag;
        let n = 0;
        let i = 0;
        let neg_flag = false;
        if(charAt(i)=45){
            let neg_flag = true;
            let i = i + 1;
        }
        while((charAt(i)>47) & (charAt(i)<58) & (i<len)){
            let n = (n *10) + (charAt(i)-48); // '0'= 48,...,'9'=57
            let i = i +1;
        }
        if(neg_flag){
            let n = -n;
        }
        return n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int d, i;
        var boolean neg_flag;
        let neg_flag = false;
        if(val<0){
            let neg_flag = true;
            let val = Math.abs(val);
        }
        
        let len = 0;
        

        let d = val - ((val/10)*10);
        if(Math.abs(val)>9){
            do setInt(val/10);
        }
        else{
            if(val<0){
                do appendChar(45);
            }
        }
        do appendChar(d+48);
        if(neg_flag){
            let i=len;
            while(i>0){ 
                do setCharAt(i,charAt(i-1));
                let i = i-1;
            }
            do setCharAt(0,45);
            let len = len+1;
        }  
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
