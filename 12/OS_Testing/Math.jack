// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array two_pow;

    /** Initializes the library. */
    function void init() {
        var int i;
        let two_pow = Array.new(16);
        
        let i = 1;
        let two_pow[0] = 1;
        while(i<16){
            let two_pow[i] = two_pow[i-1]+ two_pow[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x<0){ let x = -x; }
        return x;    
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, result;
        let result = 0;
        let i = 1;                           // i gets doubles each iteration 2^i
        while(~(y=0)){
            if( ~((y&i)=0) ){  
                let result = result + x;
            }
            let x = x + x;
            let y = y & (~i);               // Removes (i)th bit from y   
            let i = i + i;
        }
        return result;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        let q = Math.divide_pos(Math.abs(x), Math.abs(y));
        if(x<0){ let q = -q;}
        if(y<0){ let q = -q;}
        return q;
    }

    function int divide_pos(int x, int y){
        // This is written to divide positive numbers
        // and not exposed outside

        var int q;

        if(y>x){ let q = 0; }
        else{
            let q = Math.divide_pos(x, y+y );
            let q = q+q;
            if((x-(q*y))<y){}
            else{ let q = q+1;}
        }
        return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y, x_g;
        let y = 0;
        let i = 8;
        while(i>0){
            let x_g = (y+two_pow[i-1]) * (y+two_pow[i-1]);
            if(((x-x_g)+1)>0){
                let y = y + two_pow[i-1];
            }
            let i = i-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        var int n_max;
        let n_max = a;
        if(b>a){
            let n_max = b;
        }
        return n_max;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        var int n_min;
        let n_min = a;
        if(b<a){
            let n_min = b;
        }
        return n_min;
    }

    /** Helping function that gives the bit value at i_th place*/
    function int bitAt(int x, int i){
        var int bit;
        let bit = x&two_pow[i];
        if(~(bit=0)){let bit = 1; }
        return bit;
    }
}
