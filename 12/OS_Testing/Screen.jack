// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screen_base, screen_size, rows, columns; 
    static boolean color;
    static Array screen_arr;
    static Array white, black;
    static Array white_from, black_from, color_from, color_upto; 

    /*
        back_from[0]: '0b 1111 1111 1111 1111'
        back_from[1]: '0b 1111 1111 1111 1110'
        back_from[2]: '0b 1111 1111 1111 1100' ...

        white_from[0]: '0b 0000 0000 0000 0000'
        white_from[1]: '0b 0000 0000 0000 0001'

    */
    /** Initializes the Screen. */
    function void init() {
        var int i;
        let screen_base = 16384;
        let screen_size = 8192;
        let rows = 256;
        let columns = 32;
        let screen_arr = screen_base;
        let white = Array.new(16);
        let black = Array.new(16);

        let black_from = Array.new(17);
        let white_from = Array.new(17);

        let black[0] = 1;
        let white[0] = ~(black[0]);

        let white_from[0] = 0;
        let black_from[0] = ~(white_from[0]);

        let white_from[1] = 1;
        let black_from[1] = ~(white_from[1]);
        

        let i = 1;
        while(i<16){
            let black[i] = black[i-1]+ black[i-1];
            let white[i] = ~(black[i]);

            let white_from[i+1] = white_from[i]+ black[i];
            let black_from[i+1] = ~(white_from[i+1]);

            let i = i + 1;
        }
        let color = true;
        let color_from = black_from; 
        let color_upto = white_from;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i<screen_size){
            let screen_arr[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b; // b=true=-1 for black, b=false=0 for white
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int mem_loc, bit_loc, data;
        let mem_loc = (y*32)+(x/16);
        let bit_loc = x&15;
        let data = screen_arr[mem_loc];
        if(color){
            let data = data | black[bit_loc]; 
        }
        else{
            let data = data & white[bit_loc]; 
        }
        let screen_arr[mem_loc] = data;
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, temp;
        // The following variables are used to optimize the horizontal line drawing
        var int mem_loc1, bit_loc1, data;
        var int mem_loc2, bit_loc2;
        var int i,n;
        
        let a = 0;
        let b = 0;
        let x = x1;
        let y = y1;
    
        if((x2>x1) & (y2>y1)){
            let dx = x2-x1;
            let dy = y2-y1;
            do Screen.drawPixel(x,y); 
            while((x<x2) | (y<y2)){
                if(a>b){
                    let y = y + 1 ;
                    let b = b + dx;    
                }
                else{
                    let x = x + 1 ; 
                    let a = a + dy; 
                }
                do Screen.drawPixel(x,y); 
            }
        }

        if((x2<x1) & (y2<y1)){
            do Screen.drawLine(x2,y2,x1,y1);
        }

        if( (x2<x1) & (y2>y1)){
            let dx = x1-x2;
            let dy = y2-y1;

            do Screen.drawPixel(x,y); 
            while((x2<x) | (y<y2)){
                if(a>b){
                    let y = y + 1 ;
                    let b = b + dx;   
                }
                else{
                    let x = x - 1 ; 
                    let a = a + dy;  
                }
                do Screen.drawPixel(x,y); 
            }

        }

        if((x2>x1) & (y2<y1)){
            do Screen.drawLine(x2,y2,x1,y1);
        }

        if(x1=x2){ 
            
            if(y1>y2){
                do Screen.drawLine(x2,y2,x1,y1);
            }
            let dy = y2-y1;

            do Screen.drawPixel(x,y); 
            while((y<y2)){
                let y = y +1;  
                do Screen.drawPixel(x,y);   
            }
                 

        }

        if(y1=y2){ 
            if(x1>x2){
                do Screen.drawLine(x2,y2,x1,y1);
            }
            else{
                //let mem_loc1 = (y1*32)+(x1/16);
                //let mem_loc2 = (y2*32)+(x2/16);
                let mem_loc1 = y1;
                let mem_loc1 = mem_loc1+mem_loc1; //*2
                let mem_loc1 = mem_loc1+mem_loc1; //*4
                let mem_loc1 = mem_loc1+mem_loc1; //*8
                let mem_loc1 = mem_loc1+mem_loc1; //*16
                let mem_loc1 = mem_loc1+mem_loc1; //*32

                let mem_loc2 = y2;
                let mem_loc2 = mem_loc2+mem_loc2; //*2
                let mem_loc2 = mem_loc2+mem_loc2; //*4
                let mem_loc2 = mem_loc2+mem_loc2; //*8
                let mem_loc2 = mem_loc2+mem_loc2; //*16
                let mem_loc2 = mem_loc2+mem_loc2; //*32

                let mem_loc1 = mem_loc1 + (x1/16);
                let mem_loc2 = mem_loc2 + (x2/16);

                let bit_loc1 = x1&15;
                let bit_loc2 = x2&15;

                let n = mem_loc2 - mem_loc1-1;

                while(n>0){
                    let screen_arr[mem_loc1+n] = color;
                    let n = n-1;
                } 

                if(mem_loc1=mem_loc2){
                    let data = screen_arr[mem_loc1];
                    if(color){
                        let data = (data | (black_from[bit_loc1] & white_from[bit_loc2+1]));
                    }
                    else{
                        let data = (data & (white_from[bit_loc1] | black_from[bit_loc2+1]));
                    }
                    let screen_arr[mem_loc2] = data;
                }
                else{
                    // Start of the line
                    let data = screen_arr[mem_loc1];
                    if(color){
                        let data = (data | black_from[bit_loc1]); 
                    }
                    else{
                        let data = (data & white_from[bit_loc1]); 
                    }
                    let screen_arr[mem_loc1] = data;
                    
                    // End of the line
                    let data = screen_arr[mem_loc2];
                    if(color){
                        let data = (data | (white_from[bit_loc2+1])); 
                    }
                    else{
                        let data = (data & black_from[bit_loc2+1]); 
                    }
                    let screen_arr[mem_loc2] = data;
                }

                /* Slow code
                let dx = x2-x1;

                do Screen.drawPixel(x,y); 
                while((x<x2)){
                    let x = x +1;  
                    do Screen.drawPixel(x,y);    
                }
                */
             }       
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i, dx, dy; 
        var int mem_loc1, bit_loc1, data;
        var int mem_loc2, bit_loc2;
        var int n, N;

        let mem_loc1 = y1;
        let mem_loc1 = mem_loc1+mem_loc1; //*2
        let mem_loc1 = mem_loc1+mem_loc1; //*4
        let mem_loc1 = mem_loc1+mem_loc1; //*8
        let mem_loc1 = mem_loc1+mem_loc1; //*16
        let mem_loc1 = mem_loc1+mem_loc1; //*32

        let mem_loc2 = mem_loc1 + (x2/16);
        let mem_loc1 = mem_loc1 + (x1/16);
        

        let bit_loc1 = x1&15;
        let bit_loc2 = x2&15;

        let N = mem_loc2 - mem_loc1-1;
        let dy = y2-y1;
        let i = 0;

        while(i<(dy+1)){
            let n = N;
            while(n>0){
                let screen_arr[mem_loc1+n] = color;
                let n = n-1;
            } 

            if(mem_loc1=mem_loc2){
                let data = screen_arr[mem_loc1];
                if(color){
                    let data = (data | (black_from[bit_loc1] & white_from[bit_loc2+1]));
                }
                else{
                    let data = (data & (white_from[bit_loc1] | black_from[bit_loc2+1]));
                }
                let screen_arr[mem_loc2] = data;
            }
            else{
                // Start of the line
                let data = screen_arr[mem_loc1];
                if(color){
                    let data = (data | black_from[bit_loc1]); 
                }
                else{
                    let data = (data & white_from[bit_loc1]); 
                }
                let screen_arr[mem_loc1] = data;
                
                // End of the line
                let data = screen_arr[mem_loc2];
                if(color){
                    let data = (data | (white_from[bit_loc2+1])); 
                }
                else{
                    let data = (data & black_from[bit_loc2+1]); 
                }
                let screen_arr[mem_loc2] = data;
            }
            
            let mem_loc1 = mem_loc1 + 32;
            let mem_loc2 = mem_loc2 + 32;
            // Backup
            //do Screen.drawLine(x1, y1+i, x2, y1+i);
            let i = i+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx,dy, r2;
        let dy = r;
        let r2 = r*r;
        while((dy+1)>0){
            let dx = Math.sqrt(r2-(dy*dy));
            do Screen.drawLine(x-dx,y+dy,x+dx,y+dy);
            do Screen.drawLine(x-dx,y-dy,x+dx,y-dy);
            let dy = dy - 1;
        }
        return;
    }
}
